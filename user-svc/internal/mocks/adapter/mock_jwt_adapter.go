// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/jwt_adapter.go
//
// Generated by this command:
//
//	mockgen -source=./adapter/jwt_adapter.go -destination=./mocks/adapter/mock_jwt_adapter.go -package=mockadapter
//

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	entity "go-saga-pattern/user-svc/internal/entity"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTAdapter is a mock of JWTAdapter interface.
type MockJWTAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockJWTAdapterMockRecorder
	isgomock struct{}
}

// MockJWTAdapterMockRecorder is the mock recorder for MockJWTAdapter.
type MockJWTAdapterMockRecorder struct {
	mock *MockJWTAdapter
}

// NewMockJWTAdapter creates a new mock instance.
func NewMockJWTAdapter(ctrl *gomock.Controller) *MockJWTAdapter {
	mock := &MockJWTAdapter{ctrl: ctrl}
	mock.recorder = &MockJWTAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTAdapter) EXPECT() *MockJWTAdapterMockRecorder {
	return m.recorder
}

// GenerateAdminAccessToken mocks base method.
func (m *MockJWTAdapter) GenerateAdminAccessToken(userID uuid.UUID) (*entity.AdminAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAdminAccessToken", userID)
	ret0, _ := ret[0].(*entity.AdminAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAdminAccessToken indicates an expected call of GenerateAdminAccessToken.
func (mr *MockJWTAdapterMockRecorder) GenerateAdminAccessToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAdminAccessToken", reflect.TypeOf((*MockJWTAdapter)(nil).GenerateAdminAccessToken), userID)
}

// GenerateUserAccessToken mocks base method.
func (m *MockJWTAdapter) GenerateUserAccessToken(userID uuid.UUID) (*entity.UserAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserAccessToken", userID)
	ret0, _ := ret[0].(*entity.UserAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserAccessToken indicates an expected call of GenerateUserAccessToken.
func (mr *MockJWTAdapterMockRecorder) GenerateUserAccessToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserAccessToken", reflect.TypeOf((*MockJWTAdapter)(nil).GenerateUserAccessToken), userID)
}

// VerifyAdminAccessToken mocks base method.
func (m *MockJWTAdapter) VerifyAdminAccessToken(token string) (*entity.AdminAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAdminAccessToken", token)
	ret0, _ := ret[0].(*entity.AdminAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAdminAccessToken indicates an expected call of VerifyAdminAccessToken.
func (mr *MockJWTAdapterMockRecorder) VerifyAdminAccessToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAdminAccessToken", reflect.TypeOf((*MockJWTAdapter)(nil).VerifyAdminAccessToken), token)
}

// VerifyUserAccessToken mocks base method.
func (m *MockJWTAdapter) VerifyUserAccessToken(token string) (*entity.UserAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserAccessToken", token)
	ret0, _ := ret[0].(*entity.UserAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserAccessToken indicates an expected call of VerifyUserAccessToken.
func (mr *MockJWTAdapterMockRecorder) VerifyUserAccessToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserAccessToken", reflect.TypeOf((*MockJWTAdapter)(nil).VerifyUserAccessToken), token)
}
