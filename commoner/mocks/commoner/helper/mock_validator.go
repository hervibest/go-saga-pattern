// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper/validate_helper.go
//
// Generated by this command:
//
//	mockgen -source=./helper/validate_helper.go -destination=./mocks/commoner/helper/mock_validator.go -package=mockhelper
//

// Package mockhelper is a generated GoMock package.
package mockhelper

import (
	helper "go-saga-pattern/commoner/helper"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomValidator is a mock of CustomValidator interface.
type MockCustomValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCustomValidatorMockRecorder
	isgomock struct{}
}

// MockCustomValidatorMockRecorder is the mock recorder for MockCustomValidator.
type MockCustomValidatorMockRecorder struct {
	mock *MockCustomValidator
}

// NewMockCustomValidator creates a new mock instance.
func NewMockCustomValidator(ctrl *gomock.Controller) *MockCustomValidator {
	mock := &MockCustomValidator{ctrl: ctrl}
	mock.recorder = &MockCustomValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomValidator) EXPECT() *MockCustomValidatorMockRecorder {
	return m.recorder
}

// ValidateUseCase mocks base method.
func (m *MockCustomValidator) ValidateUseCase(payload any) *helper.UseCaseValError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUseCase", payload)
	ret0, _ := ret[0].(*helper.UseCaseValError)
	return ret0
}

// ValidateUseCase indicates an expected call of ValidateUseCase.
func (mr *MockCustomValidatorMockRecorder) ValidateUseCase(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUseCase", reflect.TypeOf((*MockCustomValidator)(nil).ValidateUseCase), payload)
}
