// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/user_adapter.go
//
// Generated by this command:
//
//	mockgen -source=./adapter/user_adapter.go -destination=./mocks/adapter/mock_user_adapter.go -package=mockadapter
//

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	context "context"
	userpb "go-saga-pattern/proto/userpb"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserAdapter is a mock of UserAdapter interface.
type MockUserAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockUserAdapterMockRecorder
	isgomock struct{}
}

// MockUserAdapterMockRecorder is the mock recorder for MockUserAdapter.
type MockUserAdapterMockRecorder struct {
	mock *MockUserAdapter
}

// NewMockUserAdapter creates a new mock instance.
func NewMockUserAdapter(ctrl *gomock.Controller) *MockUserAdapter {
	mock := &MockUserAdapter{ctrl: ctrl}
	mock.recorder = &MockUserAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAdapter) EXPECT() *MockUserAdapterMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockUserAdapter) AuthenticateUser(ctx context.Context, token string) (*userpb.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", ctx, token)
	ret0, _ := ret[0].(*userpb.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockUserAdapterMockRecorder) AuthenticateUser(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockUserAdapter)(nil).AuthenticateUser), ctx, token)
}
