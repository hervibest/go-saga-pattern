// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/product_repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository/product_repository.go -destination=./mocks/repository/mock_product_repository.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	enum "go-saga-pattern/commoner/constant/enum"
	web "go-saga-pattern/commoner/web"
	entity "go-saga-pattern/product-svc/internal/entity"
	model "go-saga-pattern/product-svc/internal/model"
	store "go-saga-pattern/product-svc/internal/repository/store"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
	isgomock struct{}
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// DeleteByIDAndUserID mocks base method.
func (m *MockProductRepository) DeleteByIDAndUserID(ctx context.Context, db store.Querier, id, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDAndUserID", ctx, db, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDAndUserID indicates an expected call of DeleteByIDAndUserID.
func (mr *MockProductRepositoryMockRecorder) DeleteByIDAndUserID(ctx, db, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDAndUserID", reflect.TypeOf((*MockProductRepository)(nil).DeleteByIDAndUserID), ctx, db, id, userID)
}

// ExistByNameOrSlugExceptHerself mocks base method.
func (m *MockProductRepository) ExistByNameOrSlugExceptHerself(ctx context.Context, db store.Querier, name, slug string, id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistByNameOrSlugExceptHerself", ctx, db, name, slug, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistByNameOrSlugExceptHerself indicates an expected call of ExistByNameOrSlugExceptHerself.
func (mr *MockProductRepositoryMockRecorder) ExistByNameOrSlugExceptHerself(ctx, db, name, slug, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistByNameOrSlugExceptHerself", reflect.TypeOf((*MockProductRepository)(nil).ExistByNameOrSlugExceptHerself), ctx, db, name, slug, id)
}

// ExistsByNameOrSlug mocks base method.
func (m *MockProductRepository) ExistsByNameOrSlug(ctx context.Context, db store.Querier, name, slug string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByNameOrSlug", ctx, db, name, slug)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByNameOrSlug indicates an expected call of ExistsByNameOrSlug.
func (mr *MockProductRepositoryMockRecorder) ExistsByNameOrSlug(ctx, db, name, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByNameOrSlug", reflect.TypeOf((*MockProductRepository)(nil).ExistsByNameOrSlug), ctx, db, name, slug)
}

// FindByID mocks base method.
func (m *MockProductRepository) FindByID(ctx context.Context, db store.Querier, id uuid.UUID) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, db, id)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProductRepositoryMockRecorder) FindByID(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProductRepository)(nil).FindByID), ctx, db, id)
}

// FindByIDAndUserID mocks base method.
func (m *MockProductRepository) FindByIDAndUserID(ctx context.Context, db store.Querier, id, userID uuid.UUID) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDAndUserID", ctx, db, id, userID)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDAndUserID indicates an expected call of FindByIDAndUserID.
func (mr *MockProductRepositoryMockRecorder) FindByIDAndUserID(ctx, db, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDAndUserID", reflect.TypeOf((*MockProductRepository)(nil).FindByIDAndUserID), ctx, db, id, userID)
}

// FindBySlug mocks base method.
func (m *MockProductRepository) FindBySlug(ctx context.Context, db store.Querier, slug string) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySlug", ctx, db, slug)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySlug indicates an expected call of FindBySlug.
func (mr *MockProductRepositoryMockRecorder) FindBySlug(ctx, db, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySlug", reflect.TypeOf((*MockProductRepository)(nil).FindBySlug), ctx, db, slug)
}

// FindManyByIDs mocks base method.
func (m *MockProductRepository) FindManyByIDs(ctx context.Context, db store.Querier, ids []uuid.UUID, lockType enum.LockTypeEnum) ([]*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyByIDs", ctx, db, ids, lockType)
	ret0, _ := ret[0].([]*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindManyByIDs indicates an expected call of FindManyByIDs.
func (mr *MockProductRepositoryMockRecorder) FindManyByIDs(ctx, db, ids, lockType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyByIDs", reflect.TypeOf((*MockProductRepository)(nil).FindManyByIDs), ctx, db, ids, lockType)
}

// Insert mocks base method.
func (m *MockProductRepository) Insert(ctx context.Context, db store.Querier, product *entity.Product) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, db, product)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockProductRepositoryMockRecorder) Insert(ctx, db, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductRepository)(nil).Insert), ctx, db, product)
}

// OwnerFindAll mocks base method.
func (m *MockProductRepository) OwnerFindAll(ctx context.Context, db store.Querier, request *model.OwnerSearchProductsRequest) ([]*entity.ProductWithTotal, *web.PageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerFindAll", ctx, db, request)
	ret0, _ := ret[0].([]*entity.ProductWithTotal)
	ret1, _ := ret[1].(*web.PageMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OwnerFindAll indicates an expected call of OwnerFindAll.
func (mr *MockProductRepositoryMockRecorder) OwnerFindAll(ctx, db, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerFindAll", reflect.TypeOf((*MockProductRepository)(nil).OwnerFindAll), ctx, db, request)
}

// PublicFindAll mocks base method.
func (m *MockProductRepository) PublicFindAll(ctx context.Context, db store.Querier, page, limit int) ([]*entity.ProductWithTotal, *web.PageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicFindAll", ctx, db, page, limit)
	ret0, _ := ret[0].([]*entity.ProductWithTotal)
	ret1, _ := ret[1].(*web.PageMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublicFindAll indicates an expected call of PublicFindAll.
func (mr *MockProductRepositoryMockRecorder) PublicFindAll(ctx, db, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicFindAll", reflect.TypeOf((*MockProductRepository)(nil).PublicFindAll), ctx, db, page, limit)
}

// ReduceQuantity mocks base method.
func (m *MockProductRepository) ReduceQuantity(ctx context.Context, db store.Querier, id uuid.UUID, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceQuantity", ctx, db, id, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReduceQuantity indicates an expected call of ReduceQuantity.
func (mr *MockProductRepositoryMockRecorder) ReduceQuantity(ctx, db, id, quantity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceQuantity", reflect.TypeOf((*MockProductRepository)(nil).ReduceQuantity), ctx, db, id, quantity)
}

// RestoreQuantity mocks base method.
func (m *MockProductRepository) RestoreQuantity(ctx context.Context, db store.Querier, id uuid.UUID, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreQuantity", ctx, db, id, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreQuantity indicates an expected call of RestoreQuantity.
func (mr *MockProductRepositoryMockRecorder) RestoreQuantity(ctx, db, id, quantity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreQuantity", reflect.TypeOf((*MockProductRepository)(nil).RestoreQuantity), ctx, db, id, quantity)
}

// UpdateByID mocks base method.
func (m *MockProductRepository) UpdateByID(ctx context.Context, db store.Querier, product *entity.Product) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, db, product)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockProductRepositoryMockRecorder) UpdateByID(ctx, db, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockProductRepository)(nil).UpdateByID), ctx, db, product)
}
