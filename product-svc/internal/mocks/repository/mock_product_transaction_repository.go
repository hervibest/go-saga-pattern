// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/product_transaction_repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository/product_transaction_repository.go -destination=./mocks/repository/mock_product_transaction_repository.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	enum "go-saga-pattern/commoner/constant/enum"
	entity "go-saga-pattern/product-svc/internal/entity"
	store "go-saga-pattern/product-svc/internal/repository/store"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProductTransactionRepository is a mock of ProductTransactionRepository interface.
type MockProductTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockProductTransactionRepositoryMockRecorder is the mock recorder for MockProductTransactionRepository.
type MockProductTransactionRepositoryMockRecorder struct {
	mock *MockProductTransactionRepository
}

// NewMockProductTransactionRepository creates a new mock instance.
func NewMockProductTransactionRepository(ctrl *gomock.Controller) *MockProductTransactionRepository {
	mock := &MockProductTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockProductTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductTransactionRepository) EXPECT() *MockProductTransactionRepositoryMockRecorder {
	return m.recorder
}

// FindManyByTrxID mocks base method.
func (m *MockProductTransactionRepository) FindManyByTrxID(ctx context.Context, db store.Querier, transactionID uuid.UUID, forUpdate bool) ([]*entity.ProductTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyByTrxID", ctx, db, transactionID, forUpdate)
	ret0, _ := ret[0].([]*entity.ProductTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindManyByTrxID indicates an expected call of FindManyByTrxID.
func (mr *MockProductTransactionRepositoryMockRecorder) FindManyByTrxID(ctx, db, transactionID, forUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyByTrxID", reflect.TypeOf((*MockProductTransactionRepository)(nil).FindManyByTrxID), ctx, db, transactionID, forUpdate)
}

// Insert mocks base method.
func (m *MockProductTransactionRepository) Insert(ctx context.Context, db store.Querier, productTransaction *entity.ProductTransaction) (*entity.ProductTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, db, productTransaction)
	ret0, _ := ret[0].(*entity.ProductTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockProductTransactionRepositoryMockRecorder) Insert(ctx, db, productTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductTransactionRepository)(nil).Insert), ctx, db, productTransaction)
}

// InsertMany mocks base method.
func (m *MockProductTransactionRepository) InsertMany(ctx context.Context, db store.Querier, productTransactions []*entity.ProductTransaction) ([]*entity.ProductTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, db, productTransactions)
	ret0, _ := ret[0].([]*entity.ProductTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockProductTransactionRepositoryMockRecorder) InsertMany(ctx, db, productTransactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockProductTransactionRepository)(nil).InsertMany), ctx, db, productTransactions)
}

// UpdateStatus mocks base method.
func (m *MockProductTransactionRepository) UpdateStatus(ctx context.Context, db store.Querier, transactionID uuid.UUID, status enum.ProductTransactionStatusEnum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, db, transactionID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockProductTransactionRepositoryMockRecorder) UpdateStatus(ctx, db, transactionID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockProductTransactionRepository)(nil).UpdateStatus), ctx, db, transactionID, status)
}
