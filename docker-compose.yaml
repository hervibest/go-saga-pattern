version: '3.8'

services:
  redis:
    image: redis:7.2-alpine
    command: redis-server 
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "${DB_PORT}:5432"

  nats:
    image: nats:2.11.2-alpine
    ports:
      - "${NATS_PORT}:4222"
      - "${NATS_MONITORING_PORT}:8222"
    networks:
      - backend
    command: ["-js", "-m", "8222"]
  
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.5.3
  #   hostname: zookeeper
  #   container_name: zookeeper-latest
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - backend

  # kafka:
  #   image: confluentinc/cp-kafka:7.5.3
  #   hostname: kafka
  #   container_name: kafka-latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #   networks:
  #     - backend

  consul:
    image: hashicorp/consul:1.20.6
    ports:
      - "${CONSUL_PORT}:8500"
    command: "agent -dev -client=0.0.0.0"
    networks:
      - backend

networks:
  backend:
    name: backend
    driver: bridge

volumes:
  pgdata: